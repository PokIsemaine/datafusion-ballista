// This file is @generated by prost-build.
/// 请求消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HelloRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// 响应消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HelloReply {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StageOperator {
    #[prost(string, tag = "1")]
    pub job_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub job_name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub stage_id: u64,
    #[prost(uint64, tag = "4")]
    pub current_op_id: u64,
    #[prost(uint64, tag = "5")]
    pub parent_op_id: u64,
    #[prost(string, tag = "6")]
    pub operator_type: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub stat_num_rows: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub stat_total_byte_size: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub column_stats: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag = "10")]
    pub topk_fetch: ::core::option::Option<u64>,
    #[prost(string, tag = "11")]
    pub sort_expr: ::prost::alloc::string::String,
    #[prost(bool, tag = "12")]
    pub preserve_partitioning: bool,
    #[prost(string, tag = "13")]
    pub agg_mode: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub agg_gby: ::prost::alloc::string::String,
    #[prost(string, tag = "15")]
    pub agg_aggr: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag = "16")]
    pub agg_limit: ::core::option::Option<u64>,
    #[prost(string, tag = "17")]
    pub agg_input_order_mode: ::prost::alloc::string::String,
    #[prost(uint64, tag = "18")]
    pub coalesce_batch_target_batch_size: u64,
    #[prost(uint64, optional, tag = "19")]
    pub coalesce_batch_fetch: ::core::option::Option<u64>,
    #[prost(string, tag = "20")]
    pub filter_predicate: ::prost::alloc::string::String,
    #[prost(string, tag = "21")]
    pub filter_projection: ::prost::alloc::string::String,
    #[prost(string, tag = "22")]
    pub hj_mode: ::prost::alloc::string::String,
    #[prost(string, tag = "23")]
    pub hj_join_type: ::prost::alloc::string::String,
    #[prost(string, tag = "24")]
    pub hj_on: ::prost::alloc::string::String,
    #[prost(string, tag = "25")]
    pub hj_filter: ::prost::alloc::string::String,
    #[prost(string, tag = "26")]
    pub hj_projections: ::prost::alloc::string::String,
    #[prost(string, tag = "27")]
    pub nlj_join_type: ::prost::alloc::string::String,
    #[prost(string, tag = "28")]
    pub nlj_filter: ::prost::alloc::string::String,
    #[prost(string, tag = "29")]
    pub nlj_projections: ::prost::alloc::string::String,
    #[prost(string, tag = "30")]
    pub smj_join_type: ::prost::alloc::string::String,
    #[prost(string, tag = "31")]
    pub smj_on: ::prost::alloc::string::String,
    #[prost(string, tag = "32")]
    pub smj_filter: ::prost::alloc::string::String,
    #[prost(string, tag = "33")]
    pub sort_required_expr: ::prost::alloc::string::String,
    #[prost(string, tag = "34")]
    pub shj_mode: ::prost::alloc::string::String,
    #[prost(string, tag = "35")]
    pub shj_join_type: ::prost::alloc::string::String,
    #[prost(string, tag = "36")]
    pub shj_on: ::prost::alloc::string::String,
    #[prost(string, tag = "37")]
    pub shj_filter: ::prost::alloc::string::String,
    #[prost(uint64, tag = "38")]
    pub global_limit_skip: u64,
    #[prost(uint64, optional, tag = "39")]
    pub global_limit_fetch: ::core::option::Option<u64>,
    #[prost(uint64, tag = "40")]
    pub local_limit_fetch: u64,
    #[prost(uint64, tag = "41")]
    pub memory_partitions: u64,
    #[prost(string, tag = "42")]
    pub memory_partition_sizes: ::prost::alloc::string::String,
    #[prost(string, tag = "43")]
    pub memory_output_ordering: ::prost::alloc::string::String,
    #[prost(string, tag = "44")]
    pub memory_constraints: ::prost::alloc::string::String,
    #[prost(uint64, tag = "45")]
    pub lazy_memory_partitions: u64,
    #[prost(string, tag = "46")]
    pub lazy_memory_batch_generators: ::prost::alloc::string::String,
    #[prost(string, tag = "47")]
    pub projection_expr: ::prost::alloc::string::String,
    #[prost(string, tag = "48")]
    pub recursive_query_name: ::prost::alloc::string::String,
    #[prost(bool, tag = "49")]
    pub recursive_query_is_distinct: bool,
    #[prost(string, tag = "50")]
    pub repartition_name: ::prost::alloc::string::String,
    #[prost(string, tag = "51")]
    pub repartition_partitioning: ::prost::alloc::string::String,
    #[prost(uint64, tag = "52")]
    pub repartition_input_partitions: u64,
    #[prost(bool, tag = "53")]
    pub repartition_preserve_order: bool,
    #[prost(string, optional, tag = "54")]
    pub repartition_sort_exprs: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "55")]
    pub partial_sort_tok_fetch: ::core::option::Option<u64>,
    #[prost(string, tag = "56")]
    pub partial_sort_expr: ::prost::alloc::string::String,
    #[prost(uint64, tag = "57")]
    pub partial_sort_common_prefix_length: u64,
    #[prost(uint64, optional, tag = "58")]
    pub sort_preserving_merge_fetch: ::core::option::Option<u64>,
    #[prost(string, tag = "59")]
    pub work_table_name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "60")]
    pub streaming_table_partition_sizes: u64,
    #[prost(string, tag = "61")]
    pub streaming_table_projection_schema: ::prost::alloc::string::String,
    #[prost(bool, tag = "62")]
    pub streaming_table_infinite_source: bool,
    #[prost(uint64, optional, tag = "63")]
    pub streaming_table_fetch: ::core::option::Option<u64>,
    #[prost(string, tag = "64")]
    pub streaming_table_ordering: ::prost::alloc::string::String,
    #[prost(uint64, tag = "65")]
    pub statistics_col_count: u64,
    #[prost(string, tag = "66")]
    pub statistics_row_count: ::prost::alloc::string::String,
    #[prost(string, tag = "67")]
    pub bounded_window_wdw: ::prost::alloc::string::String,
    #[prost(string, tag = "68")]
    pub bounded_window_input_order_mode: ::prost::alloc::string::String,
    #[prost(string, tag = "69")]
    pub window_agg_wdw: ::prost::alloc::string::String,
    #[prost(uint64, tag = "70")]
    pub memory_table_partitions: u64,
    #[prost(string, tag = "71")]
    pub parquet_base_config: ::prost::alloc::string::String,
    #[prost(string, tag = "72")]
    pub parquet_predicate: ::prost::alloc::string::String,
    #[prost(string, tag = "73")]
    pub parquet_prunning_predicate: ::prost::alloc::string::String,
    #[prost(string, tag = "74")]
    pub csv_base_config: ::prost::alloc::string::String,
    #[prost(string, tag = "75")]
    pub parquet_sink_file_group: ::prost::alloc::string::String,
    #[prost(uint64, tag = "76")]
    pub shuffle_reader_partitions: u64,
    #[prost(string, tag = "77")]
    pub shuffle_writer_output_partitioning: ::prost::alloc::string::String,
    #[prost(string, tag = "78")]
    pub unresolved_shuffle_output_partitioning: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScheduleStage {
    #[prost(uint64, tag = "1")]
    pub stage_id: u64,
    #[prost(uint64, repeated, tag = "2")]
    pub output_links: ::prost::alloc::vec::Vec<u64>,
    #[prost(message, repeated, tag = "3")]
    pub operators: ::prost::alloc::vec::Vec<StageOperator>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScheduleJob {
    #[prost(string, tag = "1")]
    pub job_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub job_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub stages: ::prost::alloc::vec::Vec<ScheduleStage>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VmSet {
    #[prost(string, tag = "1")]
    pub vm_spec_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub vm_count: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StageSchedulePolicy {
    #[prost(uint64, tag = "1")]
    pub stage_id: u64,
    #[prost(message, optional, tag = "2")]
    pub vm_set: ::core::option::Option<VmSet>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScheduleResult {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub schedule_policy: ::prost::alloc::vec::Vec<StageSchedulePolicy>,
}
/// Generated client implementations.
pub mod brain_server_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// 定义服务
    #[derive(Debug, Clone)]
    pub struct BrainServerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BrainServerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BrainServerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BrainServerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            BrainServerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SayHello RPC
        pub async fn say_hello(
            &mut self,
            request: impl tonic::IntoRequest<super::HelloRequest>,
        ) -> std::result::Result<tonic::Response<super::HelloReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/brain_server.protobuf.BrainServer/SayHello",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("brain_server.protobuf.BrainServer", "SayHello"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn recommend_schedule(
            &mut self,
            request: impl tonic::IntoRequest<super::ScheduleJob>,
        ) -> std::result::Result<tonic::Response<super::ScheduleResult>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/brain_server.protobuf.BrainServer/RecommendSchedule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "brain_server.protobuf.BrainServer",
                        "RecommendSchedule",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
